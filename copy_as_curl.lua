-- Wireshark Lua Plugin: Copy as cURL
-- Adds a "Copy as cURL" option to the HTTP protocol's context menu


-- How to setup
-- On Mac: put the script in ~/.config/wireshark/plugins

-- Copied from https://gitlab.com/wireshark/wireshark/-/wikis/uploads/e4b950d8fc5b41a3298541dcc0cf3bff/base64.lua
function base64_encode(data)
    local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    return ((data:gsub('.', function(x)
        local r,b='',x:byte()
        for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
        return r
    end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
        if (#x < 6) then return '' end
        local c=0
        for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
        return b:sub(c+1,c+1)
    end)..({ '', '==', '=' })[#data%3+1])
end -- base64_encode()

-- generated by chatgpt
function split_into_lines(input, line_length)
    local lines = {}
    for i = 1, #input, line_length do
        table.insert(lines, input:sub(i, i + line_length - 1))
    end
    return lines
end

-- Function to extract HTTP fields and generate cURL command
local function generate_curl_command(...)
    local fields = {...}

    local headers = {}

    for i, field in ipairs( fields ) do
        if field.name == 'http.request.line' and field.value then
            if field.value:find('^Host:') == nil and
                field.value:find('^Content-Length:') == nil then
                table.insert(headers, field.value)
            end
        end
    end

    local field_map = {}
    for i, field in ipairs( fields ) do
        -- keep the first value (e.g. json.object might be overwritten by nested)
        if not field_map[field.name] then
            field_map[field.name] = field.value
        end
    end

    -- for multipart data, the generated command will be like:
    --
    -- base64 -d << EOF | curl <other options> --data-binary @-
    -- <base64 encoded data>
    -- EOF
    --
    --
    -- for json data, the generated command will be like:
    --
    -- curl <other options> -d '<json data>'
    
    local cmd_builder = {}

    local curl_cmd_prefix = ''
    if field_map['mime_multipart'] then
        curl_cmd_prefix = 'base64 -d << EOF | '
    end

    table.insert(cmd_builder, curl_cmd_prefix .. 'curl -X ' .. field_map['http.request.method'] .. ' \'' .. field_map['http.host'] .. field_map['http.request.uri'] .. '\'')

    -- insert headers
    for i, header in ipairs( headers ) do
        table.insert(cmd_builder, '-H \'' .. string.gsub(header, '%s+$', '') .. '\'')
    end

    -- insert payload
    if field_map['json.object'] then
        table.insert(cmd_builder, '-d \'' .. field_map['json.object'] .. '\'')
    elseif field_map['mime_multipart'] then
        local encoded_data = base64_encode(field_map['mime_multipart']:raw())
        local splited_into_80 = split_into_lines(encoded_data, 80)
        table.insert(cmd_builder, '--data-binary @-\n' .. table.concat(splited_into_80, '\n') .. '\nEOF')
    end

    copy_to_clipboard(table.concat(cmd_builder, ' \\\n'))
end -- end of generate_curl_command

-- Register the menu item under HTTP protocol
register_packet_menu("Copy as cURL", generate_curl_command, 'http.request')
